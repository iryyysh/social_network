{"ast":null,"code":"const FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET-USERS';\nlet initialState = {\n  users: [{\n    id: 1,\n    followed: false,\n    fullName: 'Alex Ivanov',\n    status: 'Boss',\n    location: {\n      country: 'Ukraine',\n      city: 'Kiyv'\n    }\n  }, {\n    id: 2,\n    followed: true,\n    fullName: 'Olga Petrova',\n    status: 'Student',\n    location: {\n      country: 'Ukraine',\n      city: 'Dnepr'\n    }\n  }, {\n    id: 3,\n    followed: false,\n    fullName: 'Katya Sidorova',\n    status: 'Hiii',\n    location: {\n      country: 'Poland',\n      city: 'Krakow'\n    }\n  }]\n};\nexport const usersReducer = (state = initialState, action) => {\n  // debugger;\n  switch (action.type) {\n    case FOLLOW:\n      {\n        let stateCopy = { ...state,\n          users: state.users.map(user => {\n            if (user.id === action.id) {\n              return { ...user,\n                followed: true\n              };\n            }\n\n            return user;\n          })\n        };\n      }\n\n    case UNFOLLOW:\n      {\n        let stateCopy = { ...state,\n          users: state.users.map(user => {\n            if (user.id === action.id) {\n              return { ...user,\n                followed: false\n              };\n            }\n\n            return user;\n          })\n        };\n      }\n\n    case SET_USERS:\n      {\n        return { ...state,\n          users: [...state.users, ...action.users]\n        };\n      }\n\n    default:\n      return state;\n  }\n};\nexport const followAC = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollowAC = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsersAC = users => ({\n  type: SET_USERS,\n  users\n});\nexport default usersReducer;","map":{"version":3,"sources":["C:/Users/Irina/Desktop/social_network/src/redux/usersReducer.js"],"names":["FOLLOW","UNFOLLOW","SET_USERS","initialState","users","id","followed","fullName","status","location","country","city","usersReducer","state","action","type","stateCopy","map","user","followAC","userId","unfollowAC","setUsersAC"],"mappings":"AAAA,MAAMA,MAAM,GAAG,QAAf;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,SAAS,GAAG,WAAlB;AAGA,IAAIC,YAAY,GAAG;AAChBC,EAAAA,KAAK,EAAG,CACH;AAACC,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,QAAQ,EAAE,KAAlB;AAAyBC,IAAAA,QAAQ,EAAE,aAAnC;AAAkDC,IAAAA,MAAM,EAAE,MAA1D;AAAkEC,IAAAA,QAAQ,EAAE;AAACC,MAAAA,OAAO,EAAE,SAAV;AAAqBC,MAAAA,IAAI,EAAE;AAA3B;AAA5E,GADG,EAEH;AAACN,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,QAAQ,EAAE,IAAlB;AAAwBC,IAAAA,QAAQ,EAAE,cAAlC;AAAkDC,IAAAA,MAAM,EAAE,SAA1D;AAAqEC,IAAAA,QAAQ,EAAE;AAACC,MAAAA,OAAO,EAAE,SAAV;AAAqBC,MAAAA,IAAI,EAAE;AAA3B;AAA/E,GAFG,EAGH;AAACN,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,QAAQ,EAAE,KAAlB;AAAyBC,IAAAA,QAAQ,EAAE,gBAAnC;AAAqDC,IAAAA,MAAM,EAAE,MAA7D;AAAqEC,IAAAA,QAAQ,EAAE;AAACC,MAAAA,OAAO,EAAE,QAAV;AAAoBC,MAAAA,IAAI,EAAE;AAA1B;AAA/E,GAHG;AADQ,CAAnB;AASA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGV,YAAT,EAAuBW,MAAvB,KAAkC;AAC3D;AACC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKf,MAAL;AAAa;AACV,YAAIgB,SAAS,GAAG,EACZ,GAAGH,KADS;AAEXT,UAAAA,KAAK,EAAES,KAAK,CAACT,KAAN,CAAYa,GAAZ,CAAgBC,IAAI,IAAE;AACzB,gBAAIA,IAAI,CAACb,EAAL,KAAYS,MAAM,CAACT,EAAvB,EAA2B;AACvB,qBAAO,EAAC,GAAGa,IAAJ;AAAUZ,gBAAAA,QAAQ,EAAE;AAApB,eAAP;AACH;;AACD,mBAAOY,IAAP;AACH,WALM;AAFI,SAAhB;AASF;;AAED,SAAKjB,QAAL;AAAgB;AACZ,YAAIe,SAAS,GAAG,EACZ,GAAGH,KADS;AAEXT,UAAAA,KAAK,EAAES,KAAK,CAACT,KAAN,CAAYa,GAAZ,CAAgBC,IAAI,IAAE;AACzB,gBAAIA,IAAI,CAACb,EAAL,KAAYS,MAAM,CAACT,EAAvB,EAA2B;AACvB,qBAAO,EAAC,GAAGa,IAAJ;AAAUZ,gBAAAA,QAAQ,EAAE;AAApB,eAAP;AACH;;AACD,mBAAOY,IAAP;AACH,WALM;AAFI,SAAhB;AASH;;AAED,SAAKhB,SAAL;AAAiB;AACb,eAAO,EACH,GAAGW,KADA;AAEHT,UAAAA,KAAK,EAAE,CAAC,GAAGS,KAAK,CAACT,KAAV,EAAiB,GAAGU,MAAM,CAACV,KAA3B;AAFJ,SAAP;AAIH;;AAED;AAAS,aAAOS,KAAP;AAhCb;AAkCH,CApCM;AAsCP,OAAO,MAAMM,QAAQ,GAAIC,MAAD,KAAa;AAAEL,EAAAA,IAAI,EAAEf,MAAR;AAAgBoB,EAAAA;AAAhB,CAAb,CAAjB;AACP,OAAO,MAAMC,UAAU,GAAID,MAAD,KAAa;AAAEL,EAAAA,IAAI,EAAEd,QAAR;AAAkBmB,EAAAA;AAAlB,CAAb,CAAnB;AACP,OAAO,MAAME,UAAU,GAAIlB,KAAD,KAAY;AAAEW,EAAAA,IAAI,EAAEb,SAAR;AAAmBE,EAAAA;AAAnB,CAAZ,CAAnB;AAEP,eAAeQ,YAAf","sourcesContent":["const FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET-USERS';\r\n\r\n\r\nlet initialState = {\r\n   users : [\r\n        {id: 1, followed: false, fullName: 'Alex Ivanov', status: 'Boss', location: {country: 'Ukraine', city: 'Kiyv'}}, \r\n        {id: 2, followed: true, fullName: 'Olga Petrova', status: 'Student', location: {country: 'Ukraine', city: 'Dnepr'}}, \r\n        {id: 3, followed: false, fullName: 'Katya Sidorova', status: 'Hiii', location: {country: 'Poland', city: 'Krakow'}},\r\n    ],\r\n\r\n}\r\n\r\nexport const usersReducer = (state = initialState, action) => {\r\n   // debugger;\r\n    switch (action.type) {\r\n        case FOLLOW: {\r\n           let stateCopy = {\r\n               ...state,\r\n                users: state.users.map(user=>{\r\n                    if (user.id === action.id) {\r\n                        return {...user, followed: true}\r\n                    }\r\n                    return user;\r\n                })\r\n           }\r\n        }\r\n\r\n        case UNFOLLOW : {\r\n            let stateCopy = {\r\n                ...state,\r\n                 users: state.users.map(user=>{\r\n                     if (user.id === action.id) {\r\n                         return {...user, followed: false}\r\n                     }\r\n                     return user;\r\n                 })\r\n            }\r\n        }\r\n\r\n        case SET_USERS : {\r\n            return {\r\n                ...state, \r\n                users: [...state.users, ...action.users]\r\n            }\r\n        }\r\n \r\n        default: return state;    \r\n    }\r\n}\r\n\r\nexport const followAC = (userId) => ({ type: FOLLOW, userId })\r\nexport const unfollowAC = (userId) => ({ type: UNFOLLOW, userId})\r\nexport const setUsersAC = (users) => ({ type: SET_USERS, users})\r\n\r\nexport default usersReducer;"]},"metadata":{},"sourceType":"module"}